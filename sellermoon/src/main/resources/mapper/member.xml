<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.memberMapper">
	<resultMap type="java.util.Map" id="memberMap"></resultMap>

	<!-- 회원가입 -->
	<insert id="memberRegister" parameterType="kh.sellermoon.member.vo.MemberVO">
		INSERT INTO TB_MEMBER( member_no, member_address, member_method,
		                        member_level, member_password, member_name, member_phone,
		                        member_birth, member_zipcode, member_email, member_date
		                        ,member_address_detail, member_code, member_recommend )
				VALUES ( #{member_no},#{member_address, jdbcType=VARCHAR},'이메일'
						,0,#{member_password},#{member_name},#{member_phone, jdbcType=VARCHAR}
						,#{member_birth, jdbcType=VARCHAR},#{member_zipcode, jdbcType=VARCHAR}
						,#{member_email}
						,TO_CHAR(SYSDATE, 'YYYY-MM-DD')
						,#{member_address_detail, jdbcType=VARCHAR}
						, #{member_code}, #{member_recommend, jdbcType=VARCHAR})
	</insert>
	
	<!-- 카카오 로그인 -->
	<insert id="kakaoRegister" parameterType="kh.sellermoon.member.vo.MemberVO">
		INSERT INTO TB_MEMBER( member_no, member_method,
		                        member_level, member_name, member_email, member_date
		                        , member_code )
				VALUES ( #{member_no},'카카오톡'
						,0,#{member_name} ,#{member_email}
						,TO_CHAR(SYSDATE, 'YYYY-MM-DD')
						, #{member_code})
	</insert>
	
	<!-- 네이버 로그인 -->
	<insert id="naverRegister" parameterType="kh.sellermoon.member.vo.MemberVO">
		INSERT INTO TB_MEMBER( member_no, member_method,
		                        member_level, member_name, member_email, member_date
		                        , member_code )
				VALUES ( #{member_no},'네이버'
						,0,#{member_name} ,#{member_email}
						,TO_CHAR(SYSDATE, 'YYYY-MM-DD')
						, #{member_code})
	</insert>
	
	<!-- 카카오 로그인 중복검사 -->
	<select id="kakaoCheck" resultType="kh.sellermoon.member.vo.MemberVO">
		SELECT * FROM tb_member
		WHERE member_email = #{member_email}
	</select>
	
   <!-- 회원가입시 적립금 2000원 지급 -->
   <insert id="registerPoint" parameterType="kh.sellermoon.member.vo.PointVO">
   INSERT INTO TB_POINT(point_no, point_date, point_used_saved, member_no, point_type)
               VALUES (SEQ_TB_POINT_NO.NEXTVAL
                 ,TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MM:SS'),2000,#{member_no},0)
   </insert>
   
   <!-- 추천인 기입시 적립금 2000원 지급-->
   <insert id="recommendPoint" parameterType="kh.sellermoon.member.vo.PointVO">
   INSERT INTO TB_POINT(point_no, point_date, point_used_saved, member_no, point_type)
               VALUES (SEQ_TB_POINT_NO.NEXTVAL
                 ,TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MM:SS'),2000,#{member_no},1)
   </insert>
	
	<!-- 추천인 기입시 기존회원에게 적립금 2000원 지급하기위한 select문 -->
	<select id="recommendMem" resultType="kh.sellermoon.member.vo.MemberVO">
				SELECT member_no, member_code
				FROM tb_member
				WHERE member_code =#{member_code}
	</select>
	
	<!-- 회원번호 채번 -->
 	<select id="getMNo" parameterType="map" resultType="int">
		SELECT NVL((SELECT /*+index_desc(TB_MEMBER PK_TB_MEMBER)*/ member_no
		             FROM TB_MEMBER
		            WHERE rownum = 1),0)+1 member_no
		  FROM dual   
	</select>
	
	<!-- 이메일 중복체크 -->
	<select id="emailChk" parameterType="kh.sellermoon.member.vo.PointVO" resultType="int">
		SELECT COUNT(*) FROM tb_member
		WHERE  member_email = #{member_email}
	</select>
	
	<!-- 회원 로그인 로직에서 비밀번호를 비교하기때문에 password 조건절 필요없음 -->
	<select id="memberLogin" resultType="kh.sellermoon.member.vo.MemberVO">
		SELECT member_no, member_name, member_password, member_email, member_level
		FROM TB_MEMBER
		WHERE member_email = #{member_email}
	</select>
	
	<!-- 이메일(아이디) 찾기 -->
	<select id="findEmail" resultType="kh.sellermoon.member.vo.MemberVO">
		SELECT member_email FROM tb_member
		 WHERE member_name = #{member_name} AND member_phone =#{member_phone}
	</select>
	
	<!-- 임시 비밀번호 발급 -->
	<select id="findPassword" parameterType="kh.sellermoon.member.vo.MemberVO" resultType="int">
		SELECT count(*) FROM tb_member
		WHERE member_email =#{member_email}
		AND member_name =#{member_name}
		AND member_phone =#{member_phone}
	</select>
	
	<!-- 비밀번호 업데이트 -->
	<update id="updatePass" parameterType="kh.sellermoon.member.vo.MemberVO" >
		UPDATE TB_MEMBER
		SET member_password =#{member_password}
		WHERE member_no =#{member_no}
	</update>
	
	<!-- 비밀번호 업데이트(임시비밀번호 발급용) -->
	<update id="updateTemp" parameterType="kh.sellermoon.member.vo.MemberVO" >
		UPDATE TB_MEMBER
		SET member_password =#{member_password}
		WHERE member_email =#{member_email}
	</update>
	
	<!-- 회원 정보 보기 -->
	<select id="viewMember" resultType="kh.sellermoon.member.vo.MemberVO" parameterType="kh.sellermoon.member.vo.MemberVO">
		SELECT member_no,   member_zipcode, member_address, member_address_detail,
		       member_method, DECODE(member_level,0,'초승달',1,'반달','보름달') member_level, member_password,
		       member_name, member_phone, member_birth, member_email,
		       member_date, member_method, member_code
		FROM   tb_member
		WHERE  member_no =#{member_no}
	</select>
	
	<!-- 회원정보 수정 전 비밀번호 확인 -->
	<select id="chkPass" resultType="kh.sellermoon.member.vo.MemberVO">
		SELECT member_password, member_no
		  FROM   tb_member
		 WHERE  member_no =#{member_no}
	</select>
		
	<!-- 회원 정보 수정 -->
	<update id="memberModify" parameterType="kh.sellermoon.member.vo.MemberVO" >
		UPDATE tb_member
		SET member_address =#{member_address, jdbcType=VARCHAR}
		    ,member_name =#{member_name}
		    ,member_phone =#{member_phone, jdbcType=VARCHAR}
		    ,member_zipcode =#{member_zipcode, jdbcType=VARCHAR}
		    ,member_email =#{member_email}
		    ,member_address_detail =#{member_address_detail, jdbcType=VARCHAR}
		WHERE member_no =#{member_no}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="memberDelete" parameterType="kh.sellermoon.member.vo.MemberVO">
		DELETE tb_member
		 WHERE  member_no =#{member_no}
	</delete>
	
</mapper>